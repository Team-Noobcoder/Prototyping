#include "robot_ResQ.h"
#include <stdio.h>
static int queue[200];
static int visited[200];
static int previous[200];
static int current_position;
static int direction[4] = { 1,-1,21,-21 };
static int y;
static int c;
static int path[200];
static int reversePath[200];
static int p = 0;
static int b = 0;
static int construct;
static int position_target;
static int new_current_position;
static int neighbour;
 int Robot;
static int u =0 ;
static int oit;
int m;
int z;
static int q=0;
static int uik;
static int atas, bawah, kanan, kiri;
static int status = 0;
static int kimi = 0;
static int bedd = 0;


int move(char* world)
{




	switch (status)
	{

	case 0:


		/*if (status == 1 && (path[u + 1] - path[u]) == -1)
		{
			u++;
			return 4;

		}

		if (status == 1 && (path[u + 1] - path[u]) == 1)
		{

			u++;
			return 2;

		}

		if (status == 1 && (path[u + 1] - path[u]) == -21)
		{

			u++;
			return 1;

		}


		if (status == 1 && (path[u + 1] - path[u]) == 21)
		{
			u++;
			return 3;

		}

		*/


		// find R location
		for (Robot = 0; world[Robot] != 'R'; Robot++)
		{

			printf("%d ", Robot);
			current_position = Robot + 1;

		}
		// find T location
		for (Target = 0; world[Target] != 'T'; Target++)
		{
			position_target = Target + 1;


		}


		printf("%d\n", current_position);
		printf("%d\n", position_target);

		queue[0] = current_position;
		printf("%d\n", queue[0]);


		for (int v = 0; v < 200; v++) // v for visited)
		{
			visited[v] = 0;

		}

		visited[current_position] = 1;

		printf("\n \n");
		for (int prv = 0; prv < 200; prv++) // prv for previous
		{
			previous[prv] = 0;

		}




		// loop to check neighbour and inside array queue



		int* pointer;
		pointer = &queue[0];
		c = 0;

		printf("\n \n");
		for (int y = 0; queue[y] != position_target;)

		{
			current_position = *pointer;

			//queue[c] = current_position; // c for counter to check array neighbour
			  //current_position = queue[c] ;

			for (int d = 0; d < 4; d++) // d for direction

			{
				neighbour = current_position + direction[d];

				if (neighbour < 0 || neighbour > 200)

				{
					continue;

				}

				/*if (neighbour > 200)
				{


					continue;
				}
				*/

				if (world[neighbour] == 'T')
				{

					//printf("jumpa tager");
					queue[neighbour];

					d = 5;
				}


				if (world[neighbour] == '#' || world[neighbour] == '*')
				{
					continue;

				}




				if (visited[neighbour] == 1)

				{

					continue;
				}

				/*else if (world[current_position + direction[d]] == 'T')
				{

					queue[y + 1] = current_position + direction[d];


					visited[current_position + direction[d]] = 1;
					previous[current_position + direction[d]] = current_position;
					//current_position = current_position + direction[d];
					y++;
					break;
				}*/


				else
				{
					//current_position + direction[d] = queue[y];

					queue[y + 1] = neighbour;
					visited[neighbour] = 1;
					//Newcurrent_position = current_position; //tak sama
					//previous[queue[y + 1]] = Newcurrent_position;
					previous[neighbour] = current_position;
					//printf("%d ", previous[queue[y + 1]]);
					//current_position = current_position + direction[d];
					printf("Queue = %d ", queue[y + 1]);
					//printf(" Queue: %d \n ", queue[y + 1]);
					//printf("\n \n");
					//printf("%d \n", Newcurrent_position);
					y++;


				}
			}


			pointer++;

		}

		//sampai sini dah okay

		for (int x = 0; x < 200; x++)
		{
			printf("No Prev %d \n", x);
			printf("prev= %d  ", previous[x]);

		}

		int find = position_target;

		reversePath[0] = position_target;

		for (int z = 1; find != Robot; z++)
		{
			reversePath[z] = previous[find];
			find = reversePath[z];
			m = z;


		}

		int new = m;



		for (int u = 0; u < m + 1; u++)
		{

			printf("\n Reverse Path  %d ", reversePath[u]);

		}

		int try = current_position;
		path[m] = current_position;

		for (int k = 0; try != Target; k++)
		{
			path[k] = reversePath[m];
			try = reversePath[m];
			printf("\n find way %d ", path[k]);
			m--;


		}

		path[new] = position_target;

		for (int k = 0; k < new + 1; k++)
		{

			printf("Right Way %d ", path[k]);

			if (path[k] == position_target)
			{

				status = 1;
				printf("\napa apa");

			}


		}




	case 1:

		u = oit;

		int amjad = path[oit] - 21; //atas
		int farid = path[oit] + 21; //bawah
		int sh = path[oit] - 1; // kiri
		int bal = path[oit] + 1; // kanan
		printf("\n berapa eh kimi %d", kimi);
		printf("\n berapa eh amjad  %d", amjad);

		if (path[oit] == position_target)

		{
			printf("masuk tak dol");


			printf("status %d", status);
		}




		/*else if ((path[oit + 1] - path[oit]) == -1 && world[Robot - 21] == '~')
		{


			oit++;
			return 4;
		}*/

		/////////////////////////////
		// Gerak kiri bila ada air kat kiri tukar toggling mode
		else if ((path[oit + 1] - path[oit]) == -1 && world[sh] == '~' ) //bila air ada kat kiri
		{


			if (kimi == 0 && world[sh] == '~')
			{
				kimi = 1;

				return 5;
			}

			if (kimi == 1 && world[sh] == '~')
			{
				oit++;
				return 4;

			}

		}


		//atas O nk tukar land mode
		else if (((path[oit + 1] - path[oit]) == -1) && (world[sh] == 'O') && (kimi == 1))
		{
			printf("masuk tak weh");


			kimi = 0;
			return 5;

		}


		/*else if ((path[oit + 1] - path[oit] == 1) && world[Robot - 21] == '~')
		{

			oit++;
			return 2;
		}*/
		/////////////////////////////
		// Gerak kanan bila ada air kat kanan tukar toggling mode
		else if ((path[oit + 1] - path[oit]) == 1 && world[bal] == '~') //bila air ada kat kanan
		{


			if (kimi == 0 && world[bal] == '~')
			{
				kimi = 1;

				return 5;
			}

			if (kimi == 1 && world[bal] == '~')
			{
				oit++;
				return 2;

			}

		}


		//atas O nk tukar land mode
		else if (((path[oit + 1] - path[oit]) == 1) && (world[bal] == 'O') && (kimi == 1))
		{
			printf("masuk tak weh");


			kimi = 0;
			return 5;

		}

		///////////////////////////////////////////
		/////////////////////////////
		// Gerak atas bila ada air kat atas tukar toggling mode
		else if ((path[oit + 1] - path[oit]) == -21 && world[amjad] == '~') //bila air ada kat atas
		{


			if (kimi == 0 && world[amjad] == '~')
			{
				kimi = 1;

				return 5;
			}

			if (kimi == 1 && world[amjad] == '~')
			{
				oit++;
				return 1;

			}

		}


		//atas O nk tukar land mode
		else if (((path[oit + 1] - path[oit]) == -21) && (world[amjad] == 'O') && (kimi == 1))
		{
			printf("masuk tak weh");


			kimi = 0;
			return 5;

		}

		///////////////////////////////////////////

/*
else if ((path[oit + 1] - path[oit]) == 21 && world[Robot - 21] == '~')
		{


			printf("\nturun bawah 22");
			oit++;
			return 3;
		}
		*/
		/////////////////////////////
		// Gerak bawah bila ada air kat bawah tukar toggling mode
		else if ((path[oit + 1] - path[oit]) == 21 && world[farid] == '~') //bila air ada kat bawah
		{


			if (kimi == 0 && world[farid] == '~')
			{
				kimi = 1;

				return 5;
			}


		


			if (kimi == 1 && world[farid] == '~')
			{
				oit++;
				return 3;

			}

		}


		//atas O nk tukar land mode
		else if (((path[oit + 1] - path[oit]) == 21) && (world[farid] == 'O') && (kimi == 1))
		{
			printf("masuk tak weh");


			kimi = 0;
			return 5;

		}

		///////////////////////////////////////////







		//tkde air
		else if ((path[oit + 1] - path[oit]) == -1 && world[sh] != '~')
		{


			oit++;
			return 4;
		}

		else if ((path[oit + 1] - path[oit]) == 1 && world[bal] != '~')
		{

			oit++;
			return 2;
		}

		else if ((path[oit + 1] - path[oit]) == -21 && world[amjad] != '~')
		{


			oit++;
			return 1;
		}


		else if ((path[oit + 1] - path[oit]) == 21 && world[farid] != '~')
		{


			printf("\nturun bawah ");
			oit++;
			return 3;
		}








	case 2:
		
		printf("palatao");
		printf("\nsh dkt case 2 %d",sh);
		q = uik;
		int amjad1 = reversePath[uik] - 21; //atas
		int farid1 = reversePath[uik] + 21; //bawah
		int sh1 = reversePath[uik] - 1; // kiri
		int bal1 = reversePath[uik] + 1; // kanan
		printf("\nuik %d", uik);
		/*printf("\nuik %d", uik);
		printf(" \nreverse path %d", reversePath[2]);
		printf(" \nreverse path %d", reversePath[1]);
		printf(" \nreverse path %d", reversePath[0]);*/
		if (reversePath[uik] == Robot)
		{


		}



		/////////////////////////////
		// Gerak kiri bila ada air kat kiri tukar toggling mode

		                                                                                                                                                                           



		else if ((reversePath[uik + 1] - reversePath[uik]) == -1 && world[sh1] == '~') //bila air ada kat kiri
		{


			if (bedd == 0 && world[sh1] == '~')
			{
				bedd = 1;

				return 5;
			}

			if (bedd == 1 && world[sh1] == '~')
			{
				uik++;
				return 4;

			}

		}


		//atas O nk tukar land mode
		else if (((reversePath[uik + 1] - reversePath[uik]) == -1) && (world[sh1] == 'O') && (bedd == 1))
		{
			printf("masuk tak weh");


			bedd = 0;
			return 5;

		}


		/*else if ((path[oit + 1] - path[oit] == 1) && world[Robot - 21] == '~')
		{

			oit++;
			return 2;
		}*/
		/////////////////////////////
		// Gerak kanan bila ada air kat kanan tukar toggling mode
		else if ((reversePath[uik + 1] - reversePath[uik]) == 1 && world[bal1] == '~') //bila air ada kat kanan
		{


			if (bedd == 0 && world[bal1] == '~')
			{
				bedd = 1;

				return 5;
			}

			if (bedd == 1 && world[bal1] == '~')
			{
				uik++;
				return 2;

			}

		}


		//atas O nk tukar land mode
		else if ((reversePath[uik + 1] - reversePath[uik] == 1) && (world[bal1] == 'O') && (bedd == 1))
		{
			printf("masuk tak weh");


			bedd = 0;
			return 5;

		}

		///////////////////////////////////////////
		/////////////////////////////
		// Gerak atas bila ada air kat atas tukar toggling mode
		else if ((reversePath[uik + 1] - reversePath[uik]) == -21 && world[amjad1] == '~') //bila air ada kat atas
		{


			if (bedd == 0 && world[amjad1] == '~')
			{
				bedd = 1;

				return 5;
			}

			if (bedd == 1 && world[amjad1] == '~')
			{
				uik++;
				return 1;

			}

		}


		//atas O nk tukar land mode
		else if (((reversePath[uik + 1] - reversePath[uik]) == -21) && (world[amjad1] == 'O') && (bedd == 1))
		{
			printf("masuk tak weh");


			bedd = 0;
			return 5;

		}

		///////////////////////////////////////////

/*
else if ((path[oit + 1] - path[oit]) == 21 && world[Robot - 21] == '~')
		{


			printf("\nturun bawah 22");
			oit++;
			return 3;
		}
		*/
		/////////////////////////////
		// Gerak bawah bila ada air kat bawah tukar toggling mode
		else if ((reversePath[uik + 1] - reversePath[uik]) == 21 && world[farid1] == '~') //bila air ada kat bawah
		{


			if (bedd == 0 && world[farid1] == '~')
			{
				bedd = 1;

				return 5;
			}

			if (bedd == 1 && world[farid1] == '~')
			{
				uik++;
				return 3;

			}

		}


		//atas O nk tukar land mode
		else if ((reversePath[uik + 1] - reversePath[uik]) == 21 && (world[farid1] == 'O') && (bedd == 1))
		{
			printf("masuk tak weh");


			bedd = 0;
			return 5;

		}

		///////////////////////////////////////////

		//bila tkde air nk reverse path


		else if((reversePath[uik + 1] - reversePath[uik]) == -1 && world[sh1] != '~') 
		{
			uik++;
			printf("\n uik baru %d", uik);
			return 4;
		}

		else if ((reversePath[uik + 1] - reversePath[uik]) == 1 && world[bal1] != '~')
		{

			printf("\nldsfldsf");
			uik++;
			printf("%d", u);
			return 2;
		}



		else if ((reversePath[uik + 1] - reversePath[uik]) == -21 && world[amjad1] != '~')
		{
			uik++;


			return 1;
		}



		else if ((reversePath[uik + 1] - reversePath[uik]) == 21 && world[farid1] != '~')
		{


			printf("/n turun 33");
			uik++;
			return 3;
		}




	





	




	}
}

